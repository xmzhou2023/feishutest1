{"name": "预加工外包料", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"el-icon-delete\"></i> is not clickable at point (1731, 329). Other element would receive the click: <div class=\"el-dialog__wrapper\" style=\"z-index: 104;\">...</div>\n  (Session info: chrome=103.0.5060.114)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F5D953+2414931]\n\tOrdinal0 [0x00EEF5E1+1963489]\n\tOrdinal0 [0x00DDC6B8+837304]\n\tOrdinal0 [0x00E0FC27+1047591]\n\tOrdinal0 [0x00E0DC08+1039368]\n\tOrdinal0 [0x00E0B90B+1030411]\n\tOrdinal0 [0x00E0A659+1025625]\n\tOrdinal0 [0x00E00293+983699]\n\tOrdinal0 [0x00E2449C+1131676]\n\tOrdinal0 [0x00DFFC74+982132]\n\tOrdinal0 [0x00E246B4+1132212]\n\tOrdinal0 [0x00E34812+1198098]\n\tOrdinal0 [0x00E242B6+1131190]\n\tOrdinal0 [0x00DFE860+976992]\n\tOrdinal0 [0x00DFF756+980822]\n\tGetHandleVerifier [0x011CCC62+2510274]\n\tGetHandleVerifier [0x011BF760+2455744]\n\tGetHandleVerifier [0x00FEEABA+551962]\n\tGetHandleVerifier [0x00FED916+547446]\n\tOrdinal0 [0x00EF5F3B+1990459]\n\tOrdinal0 [0x00EFA898+2009240]\n\tOrdinal0 [0x00EFA985+2009477]\n\tOrdinal0 [0x00F03AD1+2046673]\n\tBaseThreadInitThunk [0x764D6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x772087A4+228]\n\tRtlGetAppContainerNamedObjectPath [0x77208774+180]", "trace": "self = <project.IPM.page_object.ProcessCenter_MaterialRequisition_Add.MaterialRequisition object at 0x000001B67EF2DCD0>\nclick_choice = '删除物料类型', chioce = '2'\n\n    def rop_down_box(self,click_choice,chioce=None):\n        '''点击'''\n        try:\n>           self.is_click(self.chome[click_choice],choice=chioce)\n\n..\\page_object\\Center_Component.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <project.IPM.page_object.ProcessCenter_MaterialRequisition_Add.MaterialRequisition object at 0x000001B67EF2DCD0>\nlocator = ('xpath', '//details[variable]//div[@class=\"tr-card--header-inner flex-1\"]//button[3]/i')\nchoice = '2'\n\n    def is_click(self, locator, choice=None):\n        \"\"\"点击元素\"\"\"\n        if choice is not None:\n            Npath = []\n            Npath.append(locator[0])\n            Npath.append(locator[1])\n            Npath[1] = Npath[1].replace('variable', choice)\n            sleep(2)\n>           self.find_element(Npath).click()\n\n..\\..\\..\\public\\base\\Basics.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"6e05a4b5c4fddec11378d1ce13cf4cbf\", element=\"bc2d3660-f56b-4d5e-837f-1b7b7164cb5a\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"6e05a4b5c4fddec11378d1ce13cf4cbf\", element=\"bc2d3660-f56b-4d5e-837f-1b7b7164cb5a\")>\ncommand = 'clickElement'\nparams = {'id': 'bc2d3660-f56b-4d5e-837f-1b7b7164cb5a', 'sessionId': '6e05a4b5c4fddec11378d1ce13cf4cbf'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e05a4b5c4fddec11378d1ce13cf4cbf\")>\ndriver_command = 'clickElement'\nparams = {'id': 'bc2d3660-f56b-4d5e-837f-1b7b7164cb5a'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B67EE047F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772087A4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77208774+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"el-icon-delete\"></i> is not clickable at point (1731, 329). Other element would receive the click: <div class=\"el-dialog__wrapper\" style=\"z-index: 104;\">...</div>\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00F5D953+2414931]\nE       \tOrdinal0 [0x00EEF5E1+1963489]\nE       \tOrdinal0 [0x00DDC6B8+837304]\nE       \tOrdinal0 [0x00E0FC27+1047591]\nE       \tOrdinal0 [0x00E0DC08+1039368]\nE       \tOrdinal0 [0x00E0B90B+1030411]\nE       \tOrdinal0 [0x00E0A659+1025625]\nE       \tOrdinal0 [0x00E00293+983699]\nE       \tOrdinal0 [0x00E2449C+1131676]\nE       \tOrdinal0 [0x00DFFC74+982132]\nE       \tOrdinal0 [0x00E246B4+1132212]\nE       \tOrdinal0 [0x00E34812+1198098]\nE       \tOrdinal0 [0x00E242B6+1131190]\nE       \tOrdinal0 [0x00DFE860+976992]\nE       \tOrdinal0 [0x00DFF756+980822]\nE       \tGetHandleVerifier [0x011CCC62+2510274]\nE       \tGetHandleVerifier [0x011BF760+2455744]\nE       \tGetHandleVerifier [0x00FEEABA+551962]\nE       \tGetHandleVerifier [0x00FED916+547446]\nE       \tOrdinal0 [0x00EF5F3B+1990459]\nE       \tOrdinal0 [0x00EFA898+2009240]\nE       \tOrdinal0 [0x00EFA985+2009477]\nE       \tOrdinal0 [0x00F03AD1+2046673]\nE       \tBaseThreadInitThunk [0x764D6359+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x772087A4+228]\nE       \tRtlGetAppContainerNamedObjectPath [0x77208774+180]\n\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_ProcessCenter_MaterialRequisition_Add.TestAddMaterial object at 0x000001B67EF2D070>\ndrivers = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6e05a4b5c4fddec11378d1ce13cf4cbf\")>\n\n    @allure.story(\"预加工外包料-正常场景\")\n    @allure.title(\"预加工外包料\")\n    @allure.description(\"预加工外包料-物料描述前后端对比”\")\n    @allure.severity(\"trivial\")\n    @pytest.mark.smoke\n    def test_006(self, drivers):\n        Add = MaterialRequisition(drivers)\n        Add.url_MaterialRequisition()\n        sleep(2)\n        Add.information('测试', '手机物料')\n        sleep(1)\n        Add.import_material('手机', '外包料_128', '预加工外包料', '手机-外包料_128-预加工外包料.xlsx')\n>       Add.delete_MaterialType('1')\n\ntest_ProcessCenter_MaterialRequisition_Add.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\page_object\\ProcessCenter_MaterialRequisition_Add.py:68: in delete_MaterialType\n    self.rop_down_box('删除物料类型',rows.get(row))\n..\\page_object\\Center_Component.py:269: in rop_down_box\n    self.is_click(self.chome[click_choice], choice=chioce)\n..\\..\\..\\public\\base\\Basics.py:152: in is_click\n    self.find_element(Npath).click()\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B67EE047F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772087A4+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77208774+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <i class=\"el-icon-delete\"></i> is not clickable at point (1731, 329). Other element would receive the click: <div class=\"el-dialog__wrapper\" style=\"z-index: 104;\">...</div>\nE         (Session info: chrome=103.0.5060.114)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00F5D953+2414931]\nE       \tOrdinal0 [0x00EEF5E1+1963489]\nE       \tOrdinal0 [0x00DDC6B8+837304]\nE       \tOrdinal0 [0x00E0FC27+1047591]\nE       \tOrdinal0 [0x00E0DC08+1039368]\nE       \tOrdinal0 [0x00E0B90B+1030411]\nE       \tOrdinal0 [0x00E0A659+1025625]\nE       \tOrdinal0 [0x00E00293+983699]\nE       \tOrdinal0 [0x00E2449C+1131676]\nE       \tOrdinal0 [0x00DFFC74+982132]\nE       \tOrdinal0 [0x00E246B4+1132212]\nE       \tOrdinal0 [0x00E34812+1198098]\nE       \tOrdinal0 [0x00E242B6+1131190]\nE       \tOrdinal0 [0x00DFE860+976992]\nE       \tOrdinal0 [0x00DFF756+980822]\nE       \tGetHandleVerifier [0x011CCC62+2510274]\nE       \tGetHandleVerifier [0x011BF760+2455744]\nE       \tGetHandleVerifier [0x00FEEABA+551962]\nE       \tGetHandleVerifier [0x00FED916+547446]\nE       \tOrdinal0 [0x00EF5F3B+1990459]\nE       \tOrdinal0 [0x00EFA898+2009240]\nE       \tOrdinal0 [0x00EFA985+2009477]\nE       \tOrdinal0 [0x00F03AD1+2046673]\nE       \tBaseThreadInitThunk [0x764D6359+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x772087A4+228]\nE       \tRtlGetAppContainerNamedObjectPath [0x77208774+180]\n\nC:\\Users\\pradmin\\AppData\\Roaming\\Python\\Python38\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "description": "预加工外包料-物料描述前后端对比”", "steps": [{"name": "添加失败截图", "status": "passed", "attachments": [{"name": "失败截图", "source": "490a6470-e84c-4b76-aea7-8e42c1ada990-attachment.png", "type": "image/png"}], "start": 1658217124164, "stop": 1658217124363}], "attachments": [{"name": "log", "source": "eddc3046-9f42-41ff-b6b0-5805f6dd8230-attachment.txt", "type": "text/plain"}], "start": 1658217082664, "stop": 1658217123402, "uuid": "bdf9305b-12c3-4e85-a334-c6dd39397206", "historyId": "1619cd1139117c6c9e860fdd8ee64f75", "testCaseId": "fff84d33c9a87bdd1662bc49b346c18f", "fullName": "project.IPM.test_case.test_ProcessCenter_MaterialRequisition_Add.TestAddMaterial#test_006", "labels": [{"name": "feature", "value": "IPM-流程中心-物料申请"}, {"name": "story", "value": "预加工外包料-正常场景"}, {"name": "severity", "value": "trivial"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "project.IPM.test_case"}, {"name": "suite", "value": "test_ProcessCenter_MaterialRequisition_Add"}, {"name": "subSuite", "value": "TestAddMaterial"}, {"name": "host", "value": "SZLIXS06"}, {"name": "thread", "value": "14300-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project.IPM.test_case.test_ProcessCenter_MaterialRequisition_Add"}]}