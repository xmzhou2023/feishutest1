{"name": "根据评估代码搜索-搜索结果正确", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-success pull-right\" id=\"queryBtn\">...</button> is not clickable at point (1103, 78). Other element would receive the click: <div class=\"fixed-dialog\" id=\"orgCategoryAdd\" style=\"display: block;\">...</div>\n  (Session info: chrome=104.0.5112.102)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00526463+2188387]\n\tOrdinal0 [0x004BE461+1762401]\n\tOrdinal0 [0x003D3D78+802168]\n\tOrdinal0 [0x00407F9B+1015707]\n\tOrdinal0 [0x00405F68+1007464]\n\tOrdinal0 [0x00403C6B+998507]\n\tOrdinal0 [0x004029D9+993753]\n\tOrdinal0 [0x003F8613+951827]\n\tOrdinal0 [0x0041C7DC+1099740]\n\tOrdinal0 [0x003F7FF4+950260]\n\tOrdinal0 [0x0041C9F4+1100276]\n\tOrdinal0 [0x0042CC22+1166370]\n\tOrdinal0 [0x0041C5F6+1099254]\n\tOrdinal0 [0x003F6BE0+945120]\n\tOrdinal0 [0x003F7AD6+948950]\n\tGetHandleVerifier [0x007C71F2+2712546]\n\tGetHandleVerifier [0x007B886D+2652765]\n\tGetHandleVerifier [0x005B002A+520730]\n\tGetHandleVerifier [0x005AEE06+516086]\n\tOrdinal0 [0x004C468B+1787531]\n\tOrdinal0 [0x004C8E88+1805960]\n\tOrdinal0 [0x004C8F75+1806197]\n\tOrdinal0 [0x004D1DF1+1842673]\n\tBaseThreadInitThunk [0x75B9FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C67A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C67A6E+238]", "trace": "self = <PerformanceAppraisal_SupplyCategory.TestAppraisal object at 0x000001EE3526E310>, drivers = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"39c83112aa87611d2475ff0da39f5eef\")>\n\n    @allure.story(\"估代码供货品类配置\")  # 场景名称\n    @allure.title(\"根据评估代码搜索-搜索结果正确\")  # 用例名称\n    @allure.description(\"根据评估代码进行搜索-搜索结果正确\")\n    @allure.severity(\"normal\")  # 用例等级\n    def test_search_code(self,drivers):\n        app = Performance(drivers)\n>       app.search_code(\"H0101\")\n\nproject\\SRM\\test_case\\PerformanceAppraisal_SupplyCategory.py:94: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nproject\\SRM\\page_object\\PerformanceAppraisal_SupplyCategory.py:95: in search_code\n    self.is_click(app[\"评估代码供货品类配置-查询\"])\npublic\\base\\basics.py:189: in is_click\n    self.find_element(locator).click()\nd:\\tools\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nd:\\tools\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nd:\\tools\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001EE352896A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-success pull-right\" id=\"queryBtn\">...</button> is not clickable at point (1103, 78). Other element would receive the click: <div class=\"fixed-dialog\" id=\"orgCategoryAdd\" style=\"display: block;\">...</div>\nE         (Session info: chrome=104.0.5112.102)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00526463+2188387]\nE       \tOrdinal0 [0x004BE461+1762401]\nE       \tOrdinal0 [0x003D3D78+802168]\nE       \tOrdinal0 [0x00407F9B+1015707]\nE       \tOrdinal0 [0x00405F68+1007464]\nE       \tOrdinal0 [0x00403C6B+998507]\nE       \tOrdinal0 [0x004029D9+993753]\nE       \tOrdinal0 [0x003F8613+951827]\nE       \tOrdinal0 [0x0041C7DC+1099740]\nE       \tOrdinal0 [0x003F7FF4+950260]\nE       \tOrdinal0 [0x0041C9F4+1100276]\nE       \tOrdinal0 [0x0042CC22+1166370]\nE       \tOrdinal0 [0x0041C5F6+1099254]\nE       \tOrdinal0 [0x003F6BE0+945120]\nE       \tOrdinal0 [0x003F7AD6+948950]\nE       \tGetHandleVerifier [0x007C71F2+2712546]\nE       \tGetHandleVerifier [0x007B886D+2652765]\nE       \tGetHandleVerifier [0x005B002A+520730]\nE       \tGetHandleVerifier [0x005AEE06+516086]\nE       \tOrdinal0 [0x004C468B+1787531]\nE       \tOrdinal0 [0x004C8E88+1805960]\nE       \tOrdinal0 [0x004C8F75+1806197]\nE       \tOrdinal0 [0x004D1DF1+1842673]\nE       \tBaseThreadInitThunk [0x75B9FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67A6E+238]\n\nd:\\tools\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "description": "根据评估代码进行搜索-搜索结果正确", "steps": [{"name": "添加失败截图", "status": "passed", "attachments": [{"name": "失败截图", "source": "b6dbd9e7-bde7-48ca-96cd-8366fbec1003-attachment.png", "type": "image/png"}], "start": 1661498546800, "stop": 1661498546949}], "attachments": [{"name": "log", "source": "a6daffb7-4b69-4bb9-a14f-5207c6f054b0-attachment.txt", "type": "text/plain"}], "start": 1661498544989, "stop": 1661498546736, "uuid": "f202f97b-40b1-41ad-9015-d5fe4ce26d4c", "historyId": "9c3cf066723b43ab9978e8708ff8b392", "testCaseId": "4dcbd771f89e81f1d6d2d6f399efa898", "fullName": "project.SRM.test_case.PerformanceAppraisal_SupplyCategory.TestAppraisal#test_search_code", "labels": [{"name": "story", "value": "估代码供货品类配置"}, {"name": "feature", "value": "供应商绩效考核"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "project.SRM.test_case"}, {"name": "suite", "value": "PerformanceAppraisal_SupplyCategory"}, {"name": "subSuite", "value": "TestAppraisal"}, {"name": "host", "value": "CQPISHIDM"}, {"name": "thread", "value": "204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project.SRM.test_case.PerformanceAppraisal_SupplyCategory"}]}