{"name": "根据姓名查询用户", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: Could not start a new session. New session request timed out\nBuild info: version: '4.3.0', revision: 'a4995e2c09*'\nSystem info: host: 'c23132d11198', ip: '172.22.0.2', os.name: 'Linux', os.arch: 'amd64', os.version: '4.18.0-193.el8.x86_64', java.version: '11.0.15'\nDriver info: driver.version: unknown\nStacktrace:\n    at org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue.addToQueue (LocalNewSessionQueue.java:181)\n    at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.lambda$new$0 (NewSessionQueue.java:68)\n    at org.openqa.selenium.remote.http.Route$TemplatizedRoute.handle (Route.java:192)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\n    at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\n    at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.execute (NewSessionQueue.java:120)\n    at org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute (SpanWrappedHttpHandler.java:86)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\n    at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\n    at org.openqa.selenium.grid.router.Router.execute (Router.java:91)\n    at org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0 (EnsureSpecCompliantResponseHeaders.java:34)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\n    at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\n    at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\n    at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\n    at org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0 (AddWebDriverSpecHeaders.java:35)\n    at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\n    at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\n    at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\n    at org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0 (SeleniumHandler.java:44)\n    at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:515)\n    at java.util.concurrent.FutureTask.run (FutureTask.java:264)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1128)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:628)\n    at java.lang.Thread.run (Thread.java:829)", "trace": "request = <SubRequest 'drivers' for <Function test_001_001>>, remote_ui = True\n\n    @pytest.fixture(scope='session', autouse=True)\n    def drivers(request, remote_ui=True):\n        global driver\n        if driver is None:\n            if 'linux' in sys.platform:\n                option = webdriver.ChromeOptions()\n                # option.add_argument('--headless')  # 浏览器不提供可视化页面（无头模式）. linux下如果系统不支持可视化不加这条会启动失败\n                # option.add_argument('--window -size=1280x1024')  # 设置浏览器分辨率（窗口大小）\n                # option.add_argument('--start -maximized')  # 最大化运行（全屏窗口）,不设置，取元素会报错\n                # option.add_argument('--disable -infobars')  # 禁用浏览器正在被自动化程序控制的提示\n                # option.add_argument('--incognito')  # 隐身模式（无痕模式）\n                # option.add_argument('--hide -scrollbars')  # 隐藏滚动条, 应对一些特殊页面\n                # option.add_argument('--disable -javascript')  # 禁用javascript\n                # option.add_argument('--blink -settings=imagesEnabled=false')  # 不加载图片, 提升速度\n                # option.add_argument('disable -gpu')  # 禁用GPU加速\n                # option.add_argument('proxy-server={}'.format(self.proxy_server))  # 配置代理\n                # option.add_argument('no-default-browser-check') # 不做浏览器默认检查\n                # option.add_argument(\"–disable-popup-blocking\")  # 允许弹窗\n                # option.add_argument(\"–disable-extensions\")  # 禁用扩展\n                # option.add_argument(\"–ignore-certificate-errors\")  # 忽略不信任证书\n                # option.add_argument(\"–no-first-run\")  # 初始化时为空白页面\n                # option.add_argument('–disable -notifications')  # 禁用通知警告\n                # option.add_argument('–enable -automation')  # 通知(通知用户其浏览器正由自动化测试控制)\n                # option.add_argument('–disable -xss -auditor')  # 禁止xss防护\n                # option.add_argument('–disable -web -security')  # 关闭安全策略\n                # option.add_argument('–allow -running -insecure  content')  # 允许运行不安全的内容\n                # option.add_argument('–disable - webgl')  # 禁用webgl\n                # option.add_argument('–homedir = {}')  # 指定主目录存放位置\n                # option.add_argument('disable -cache')  # 禁用缓存\n                # option.add_argument('--ignore-certificate-errors')  # 禁用扩展插件并实现窗口最大化\n                # option.add_argument('–disable-software-rasterizer')\n                # option.add_argument('blink-settings=imagesEnabled=false')  # 不加载图片, 提升速度\n                # option.add_experimental_option(\"debuggerAddress\", \"127.0.0.1:9222\")  # 调用原来的浏览器，不用再次登录即可重启\n                prefs = {\"\": \"\"}\n                prefs[\"credentials_enable_service\"] = False\n                prefs[\"profile.password_manager_enabled\"] = False\n                prefs[\"download.prompt_for_download\"] = False\n                option.add_experimental_option(\"prefs\", prefs)  # 屏蔽'保存密码'提示框\n    \n                option.add_argument('–lang=zh-CN')  # 设置语言\n                option.add_argument('--no-sandbox')  # 以最高权限运行\n                option.add_argument('--start-maximized')  # 最大化运行（全屏窗口）设置元素定位比较准确\n                option.add_argument('--disable-gpu')  # 谷歌文档提到需要加上这个属性来规避bug\n                # option.set_capability(\"browserVersion\", \"99.0\")\n                option.add_experimental_option(\"excludeSwitches\", ['enable-automation', 'enable-logging'])\n                # driver = webdriver.Remote(\"http://10.250.101.58:4444\", options=option)\n                # driver = webdriver.Remote(\"http://10.250.113.15:4444\", options=option)\n                driver = webdriver.Remote(\"http://10.250.113.16:4444\", options=option)\n                # inspect_element() # page_element YMAL文件自检\n            else:\n                if remote_ui:\n                    '''win系统下VNC界面模式'''\n                    option = webdriver.ChromeOptions()\n                    prefs = {\"\": \"\"}\n                    prefs[\"credentials_enable_service\"] = False\n                    prefs[\"profile.password_manager_enabled\"] = False\n                    option.add_experimental_option(\"prefs\", prefs)  # 屏蔽'保存密码'提示框\n    \n                    option.add_argument('–lang=zh-CN')  # 设置语言\n                    option.add_argument('--no-sandbox')  # 以最高权限运行\n                    option.add_argument('--start-maximized')  # 最大化运行（全屏窗口）设置元素定位比较准确\n                    option.add_argument('--disable-gpu')  # 谷歌文档提到需要加上这个属性来规避bug\n                    option.set_capability(\"browserVersion\", \"99.0\")\n                    option.add_experimental_option(\"excludeSwitches\", ['enable-automation', 'enable-logging'])\n>                   driver = webdriver.Remote(\"http://10.250.113.16:4444\", options=option)\n\nconftest.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:269: in __init__\n    self.start_session(capabilities, browser_profile)\nD:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:360: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nD:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020F1C64C250>\nresponse = {'status': 500, 'value': '{\\n  \"value\": {\\n    \"error\": \"session not created\",\\n    \"message\": \"Could not start a new ...\"className\": \"java.lang.Thread\",\\n        \"lineNumber\": 829,\\n        \"classLoaderName\": null\\n      }\\n    ]\\n  }\\n}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: Could not start a new session. New session request timed out\nE       Build info: version: '4.3.0', revision: 'a4995e2c09*'\nE       System info: host: 'c23132d11198', ip: '172.22.0.2', os.name: 'Linux', os.arch: 'amd64', os.version: '4.18.0-193.el8.x86_64', java.version: '11.0.15'\nE       Driver info: driver.version: unknown\nE       Stacktrace:\nE           at org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue.addToQueue (LocalNewSessionQueue.java:181)\nE           at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.lambda$new$0 (NewSessionQueue.java:68)\nE           at org.openqa.selenium.remote.http.Route$TemplatizedRoute.handle (Route.java:192)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\nE           at org.openqa.selenium.grid.sessionqueue.NewSessionQueue.execute (NewSessionQueue.java:120)\nE           at org.openqa.selenium.remote.tracing.SpanWrappedHttpHandler.execute (SpanWrappedHttpHandler.java:86)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\nE           at org.openqa.selenium.grid.router.Router.execute (Router.java:91)\nE           at org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders.lambda$apply$0 (EnsureSpecCompliantResponseHeaders.java:34)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\nE           at org.openqa.selenium.remote.http.Route$CombinedRoute.handle (Route.java:336)\nE           at org.openqa.selenium.remote.http.Route.execute (Route.java:68)\nE           at org.openqa.selenium.remote.AddWebDriverSpecHeaders.lambda$apply$0 (AddWebDriverSpecHeaders.java:35)\nE           at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\nE           at org.openqa.selenium.remote.ErrorFilter.lambda$apply$0 (ErrorFilter.java:44)\nE           at org.openqa.selenium.remote.http.Filter$1.execute (Filter.java:64)\nE           at org.openqa.selenium.netty.server.SeleniumHandler.lambda$channelRead0$0 (SeleniumHandler.java:44)\nE           at java.util.concurrent.Executors$RunnableAdapter.call (Executors.java:515)\nE           at java.util.concurrent.FutureTask.run (FutureTask.java:264)\nE           at java.util.concurrent.ThreadPoolExecutor.runWorker (ThreadPoolExecutor.java:1128)\nE           at java.util.concurrent.ThreadPoolExecutor$Worker.run (ThreadPoolExecutor.java:628)\nE           at java.lang.Thread.run (Thread.java:829)\n\nD:\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException"}, "description": "在输入框输入用户工号18650617,进行查询", "start": 1660526083558, "stop": 1660526083558, "uuid": "117cd22c-58de-40b4-93b4-5aecc8ca9add", "historyId": "0e7e8c6ffe6958c879691bbded153ad1", "testCaseId": "f71d25ccba14598c7e4de88fa3bdf04d", "fullName": "project.DRP.test_case.SystemMgmt_UserMgmt.TestSearchUser#test_001_001", "labels": [{"name": "feature", "value": "系统管理-用户管理"}, {"name": "story", "value": "查询用户"}, {"name": "severity", "value": "minor"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "project.DRP.test_case"}, {"name": "suite", "value": "SystemMgmt_UserMgmt"}, {"name": "subSuite", "value": "TestSearchUser"}, {"name": "host", "value": "CQPILIUYONG"}, {"name": "thread", "value": "11008-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project.DRP.test_case.SystemMgmt_UserMgmt"}]}