{"name": "编辑市场划分配置", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home", "trace": "self = <selenium.webdriver.chrome.service.Service object at 0x000002A4E97D51B0>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n>           self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n                                            stdin=PIPE,\n                                            creationflags=self.creationflags)\n\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['chromedriver', '--port=49421']>, args = ['chromedriver', '--port=49421'], bufsize = -1, executable = None, stdin = -1\nstdout = -3, stderr = -3, preexec_fn = None, close_fds = False, shell = False, cwd = None\nenv = environ({'TERM_SESSION_ID': '8d725189-070f-4070-84cb-0ef9f746a714', 'COMMONPROGRAMW6432': 'C:\\\\Program Files\\\\Common F...tory1', 'PYTEST_CURRENT_TEST': 'project/DRP/test_case/SystemMgmt_RegionMgmt.py::TestUpdateArea::test_004_004 (setup)'})\nuniversal_newlines = None, startupinfo = None, creationflags = 0, restore_signals = True, start_new_session = False, pass_fds = ()\n\n    def __init__(self, args, bufsize=-1, executable=None,\n                 stdin=None, stdout=None, stderr=None,\n                 preexec_fn=None, close_fds=True,\n                 shell=False, cwd=None, env=None, universal_newlines=None,\n                 startupinfo=None, creationflags=0,\n                 restore_signals=True, start_new_session=False,\n                 pass_fds=(), *, user=None, group=None, extra_groups=None,\n                 encoding=None, errors=None, text=None, umask=-1, pipesize=-1):\n        \"\"\"Create new Popen instance.\"\"\"\n        _cleanup()\n        # Held while anything is calling waitpid before returncode has been\n        # updated to prevent clobbering returncode if wait() or poll() are\n        # called from multiple threads at once.  After acquiring the lock,\n        # code must re-check self.returncode to see if another thread just\n        # finished a waitpid() call.\n        self._waitpid_lock = threading.Lock()\n    \n        self._input = None\n        self._communication_started = False\n        if bufsize is None:\n            bufsize = -1  # Restore default\n        if not isinstance(bufsize, int):\n            raise TypeError(\"bufsize must be an integer\")\n    \n        if pipesize is None:\n            pipesize = -1  # Restore default\n        if not isinstance(pipesize, int):\n            raise TypeError(\"pipesize must be an integer\")\n    \n        if _mswindows:\n            if preexec_fn is not None:\n                raise ValueError(\"preexec_fn is not supported on Windows \"\n                                 \"platforms\")\n        else:\n            # POSIX\n            if pass_fds and not close_fds:\n                warnings.warn(\"pass_fds overriding close_fds.\", RuntimeWarning)\n                close_fds = True\n            if startupinfo is not None:\n                raise ValueError(\"startupinfo is only supported on Windows \"\n                                 \"platforms\")\n            if creationflags != 0:\n                raise ValueError(\"creationflags is only supported on Windows \"\n                                 \"platforms\")\n    \n        self.args = args\n        self.stdin = None\n        self.stdout = None\n        self.stderr = None\n        self.pid = None\n        self.returncode = None\n        self.encoding = encoding\n        self.errors = errors\n        self.pipesize = pipesize\n    \n        # Validate the combinations of text and universal_newlines\n        if (text is not None and universal_newlines is not None\n            and bool(universal_newlines) != bool(text)):\n            raise SubprocessError('Cannot disambiguate when both text '\n                                  'and universal_newlines are supplied but '\n                                  'different. Pass one or the other.')\n    \n        # Input and output objects. The general principle is like\n        # this:\n        #\n        # Parent                   Child\n        # ------                   -----\n        # p2cwrite   ---stdin--->  p2cread\n        # c2pread    <--stdout---  c2pwrite\n        # errread    <--stderr---  errwrite\n        #\n        # On POSIX, the child objects are file descriptors.  On\n        # Windows, these are Windows file handles.  The parent objects\n        # are file descriptors on both platforms.  The parent objects\n        # are -1 when not using PIPEs. The child objects are -1\n        # when not redirecting.\n    \n        (p2cread, p2cwrite,\n         c2pread, c2pwrite,\n         errread, errwrite) = self._get_handles(stdin, stdout, stderr)\n    \n        # We wrap OS handles *before* launching the child, otherwise a\n        # quickly terminating child could make our fds unwrappable\n        # (see #8458).\n    \n        if _mswindows:\n            if p2cwrite != -1:\n                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)\n            if c2pread != -1:\n                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)\n            if errread != -1:\n                errread = msvcrt.open_osfhandle(errread.Detach(), 0)\n    \n        self.text_mode = encoding or errors or text or universal_newlines\n    \n        # PEP 597: We suppress the EncodingWarning in subprocess module\n        # for now (at Python 3.10), because we focus on files for now.\n        # This will be changed to encoding = io.text_encoding(encoding)\n        # in the future.\n        if self.text_mode and encoding is None:\n            self.encoding = encoding = \"locale\"\n    \n        # How long to resume waiting on a child after the first ^C.\n        # There is no right value for this.  The purpose is to be polite\n        # yet remain good for interactive users trying to exit a tool.\n        self._sigint_wait_secs = 0.25  # 1/xkcd221.getRandomNumber()\n    \n        self._closed_child_pipe_fds = False\n    \n        if self.text_mode:\n            if bufsize == 1:\n                line_buffering = True\n                # Use the default buffer size for the underlying binary streams\n                # since they don't support line buffering.\n                bufsize = -1\n            else:\n                line_buffering = False\n    \n        gid = None\n        if group is not None:\n            if not hasattr(os, 'setregid'):\n                raise ValueError(\"The 'group' parameter is not supported on the \"\n                                 \"current platform\")\n    \n            elif isinstance(group, str):\n                try:\n                    import grp\n                except ImportError:\n                    raise ValueError(\"The group parameter cannot be a string \"\n                                     \"on systems without the grp module\")\n    \n                gid = grp.getgrnam(group).gr_gid\n            elif isinstance(group, int):\n                gid = group\n            else:\n                raise TypeError(\"Group must be a string or an integer, not {}\"\n                                .format(type(group)))\n    \n            if gid < 0:\n                raise ValueError(f\"Group ID cannot be negative, got {gid}\")\n    \n        gids = None\n        if extra_groups is not None:\n            if not hasattr(os, 'setgroups'):\n                raise ValueError(\"The 'extra_groups' parameter is not \"\n                                 \"supported on the current platform\")\n    \n            elif isinstance(extra_groups, str):\n                raise ValueError(\"Groups must be a list, not a string\")\n    \n            gids = []\n            for extra_group in extra_groups:\n                if isinstance(extra_group, str):\n                    try:\n                        import grp\n                    except ImportError:\n                        raise ValueError(\"Items in extra_groups cannot be \"\n                                         \"strings on systems without the \"\n                                         \"grp module\")\n    \n                    gids.append(grp.getgrnam(extra_group).gr_gid)\n                elif isinstance(extra_group, int):\n                    gids.append(extra_group)\n                else:\n                    raise TypeError(\"Items in extra_groups must be a string \"\n                                    \"or integer, not {}\"\n                                    .format(type(extra_group)))\n    \n            # make sure that the gids are all positive here so we can do less\n            # checking in the C code\n            for gid_check in gids:\n                if gid_check < 0:\n                    raise ValueError(f\"Group ID cannot be negative, got {gid_check}\")\n    \n        uid = None\n        if user is not None:\n            if not hasattr(os, 'setreuid'):\n                raise ValueError(\"The 'user' parameter is not supported on \"\n                                 \"the current platform\")\n    \n            elif isinstance(user, str):\n                try:\n                    import pwd\n                except ImportError:\n                    raise ValueError(\"The user parameter cannot be a string \"\n                                     \"on systems without the pwd module\")\n                uid = pwd.getpwnam(user).pw_uid\n            elif isinstance(user, int):\n                uid = user\n            else:\n                raise TypeError(\"User must be a string or an integer\")\n    \n            if uid < 0:\n                raise ValueError(f\"User ID cannot be negative, got {uid}\")\n    \n        try:\n            if p2cwrite != -1:\n                self.stdin = io.open(p2cwrite, 'wb', bufsize)\n                if self.text_mode:\n                    self.stdin = io.TextIOWrapper(self.stdin, write_through=True,\n                            line_buffering=line_buffering,\n                            encoding=encoding, errors=errors)\n            if c2pread != -1:\n                self.stdout = io.open(c2pread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stdout = io.TextIOWrapper(self.stdout,\n                            encoding=encoding, errors=errors)\n            if errread != -1:\n                self.stderr = io.open(errread, 'rb', bufsize)\n                if self.text_mode:\n                    self.stderr = io.TextIOWrapper(self.stderr,\n                            encoding=encoding, errors=errors)\n    \n>           self._execute_child(args, executable, preexec_fn, close_fds,\n                                pass_fds, cwd, env,\n                                startupinfo, creationflags, shell,\n                                p2cread, p2cwrite,\n                                c2pread, c2pwrite,\n                                errread, errwrite,\n                                restore_signals,\n                                gid, gids, uid, umask,\n                                start_new_session)\n\nD:\\app\\Python10\\lib\\subprocess.py:966: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Popen: returncode: None args: ['chromedriver', '--port=49421']>, args = 'chromedriver --port=49421', executable = None, preexec_fn = None, close_fds = False\npass_fds = (), cwd = None\nenv = environ({'TERM_SESSION_ID': '8d725189-070f-4070-84cb-0ef9f746a714', 'COMMONPROGRAMW6432': 'C:\\\\Program Files\\\\Common F...tory1', 'PYTEST_CURRENT_TEST': 'project/DRP/test_case/SystemMgmt_RegionMgmt.py::TestUpdateArea::test_004_004 (setup)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x000002A4E97D7AF0>, creationflags = 0, shell = False, p2cread = Handle(1232), p2cwrite = 8, c2pread = -1\nc2pwrite = Handle(1240), errread = -1, errwrite = Handle(1236), unused_restore_signals = True, unused_gid = None, unused_gids = None, unused_uid = None\nunused_umask = -1, unused_start_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    FileNotFoundError: [WinError 2] 系统找不到指定的文件。\n\nD:\\app\\Python10\\lib\\subprocess.py:1435: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'drivers' for <Function test_001_001>>, remote_ui = False\n\n    @pytest.fixture(scope='session', autouse=True)\n    def drivers(request, remote_ui=False):\n        global driver\n        if driver is None:\n            if 'linux' in sys.platform:\n                option = webdriver.ChromeOptions()\n                # option.add_argument('--headless')  # 浏览器不提供可视化页面（无头模式）. linux下如果系统不支持可视化不加这条会启动失败\n                # option.add_argument('--window -size=1280x1024')  # 设置浏览器分辨率（窗口大小）\n                # option.add_argument('--start -maximized')  # 最大化运行（全屏窗口）,不设置，取元素会报错\n                # option.add_argument('--disable -infobars')  # 禁用浏览器正在被自动化程序控制的提示\n                # option.add_argument('--incognito')  # 隐身模式（无痕模式）\n                # option.add_argument('--hide -scrollbars')  # 隐藏滚动条, 应对一些特殊页面\n                # option.add_argument('--disable -javascript')  # 禁用javascript\n                # option.add_argument('--blink -settings=imagesEnabled=false')  # 不加载图片, 提升速度\n                # option.add_argument('disable -gpu')  # 禁用GPU加速\n                # option.add_argument('proxy-server={}'.format(self.proxy_server))  # 配置代理\n                # option.add_argument('no-default-browser-check') # 不做浏览器默认检查\n                # option.add_argument(\"–disable-popup-blocking\")  # 允许弹窗\n                # option.add_argument(\"–disable-extensions\")  # 禁用扩展\n                # option.add_argument(\"–ignore-certificate-errors\")  # 忽略不信任证书\n                # option.add_argument(\"–no-first-run\")  # 初始化时为空白页面\n                # option.add_argument('–disable -notifications')  # 禁用通知警告\n                # option.add_argument('–enable -automation')  # 通知(通知用户其浏览器正由自动化测试控制)\n                # option.add_argument('–disable -xss -auditor')  # 禁止xss防护\n                # option.add_argument('–disable -web -security')  # 关闭安全策略\n                # option.add_argument('–allow -running -insecure  content')  # 允许运行不安全的内容\n                # option.add_argument('–disable - webgl')  # 禁用webgl\n                # option.add_argument('–homedir = {}')  # 指定主目录存放位置\n                # option.add_argument('disable -cache')  # 禁用缓存\n                # option.add_argument('--ignore-certificate-errors')  # 禁用扩展插件并实现窗口最大化\n                # option.add_argument('–disable-software-rasterizer')\n                # option.add_argument('blink-settings=imagesEnabled=false')  # 不加载图片, 提升速度\n                # option.add_experimental_option(\"debuggerAddress\", \"127.0.0.1:9222\")  # 调用原来的浏览器，不用再次登录即可重启\n                prefs = {\"\": \"\"}\n                prefs[\"credentials_enable_service\"] = False\n                prefs[\"profile.password_manager_enabled\"] = False\n                prefs[\"download.prompt_for_download\"] = False\n                option.add_experimental_option(\"prefs\", prefs)  # 屏蔽'保存密码'提示框\n    \n                option.add_argument('–lang=zh-CN')  # 设置语言\n                option.add_argument('--no-sandbox')  # 以最高权限运行\n                option.add_argument('--start-maximized')  # 最大化运行（全屏窗口）设置元素定位比较准确\n                option.add_argument('--disable-gpu')  # 谷歌文档提到需要加上这个属性来规避bug\n                option.set_capability(\"browserVersion\", \"99.0\")\n                option.add_experimental_option(\"excludeSwitches\", ['enable-automation', 'enable-logging'])\n                driver = webdriver.Remote(\"http://10.250.101.58:4444\", options=option)\n                # driver = webdriver.Remote(\"http://10.250.113.16:4444\", options=option)\n                # inspect_element() # page_element YMAL文件自检\n            else:\n                if remote_ui:\n                    '''win系统下VNC界面模式'''\n                    option = webdriver.ChromeOptions()\n                    prefs = {\"\": \"\"}\n                    prefs[\"credentials_enable_service\"] = False\n                    prefs[\"profile.password_manager_enabled\"] = False\n                    option.add_experimental_option(\"prefs\", prefs)  # 屏蔽'保存密码'提示框\n    \n                    option.add_argument('–lang=zh-CN')  # 设置语言\n                    option.add_argument('--no-sandbox')  # 以最高权限运行\n                    option.add_argument('--start-maximized')  # 最大化运行（全屏窗口）设置元素定位比较准确\n                    option.add_argument('--disable-gpu')  # 谷歌文档提到需要加上这个属性来规避bug\n                    option.set_capability(\"browserVersion\", \"99.0\")\n                    option.add_experimental_option(\"excludeSwitches\", ['enable-automation', 'enable-logging'])\n                    driver = webdriver.Remote(\"http://10.250.101.58:4444\", options=option)\n                    # inspect_element() # page_element YMAL文件自检\n                else:\n                    option = webdriver.ChromeOptions()\n                    prefs = {\"\": \"\"}\n                    prefs[\"credentials_enable_service\"] = False\n                    prefs[\"profile.password_manager_enabled\"] = False\n                    prefs[\"download.prompt_for_download\"] = False  # 关闭下载自动打开选项\n                    prefs[\"download.default_directory\"] = DOWNLOAD_PATH\n                    option.add_experimental_option(\"prefs\", prefs)  # 屏蔽'保存密码'提示框\n                    # 防止打印一些无用的日志\n                    option.add_experimental_option(\"excludeSwitches\", ['enable-automation', 'enable-logging'])\n>                   driver = webdriver.Chrome(options=option)\n\nconftest.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:90: in __init__\n    self.service.start()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.service.Service object at 0x000002A4E97D51B0>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n            self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=system() != 'Windows',\n                                            stdout=self.log_file,\n                                            stderr=self.log_file,\n                                            stdin=PIPE,\n                                            creationflags=self.creationflags)\n        except TypeError:\n            raise\n        except OSError as err:\n            if err.errno == errno.ENOENT:\n>               raise WebDriverException(\n                    \"'%s' executable needs to be in PATH. %s\" % (\n                        os.path.basename(self.path), self.start_error_message)\nE                       selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home\n\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:81: WebDriverException"}, "description": "前往四级区域‘中国’，将市场分类‘SSA’修改为‘印度’成功", "start": 1658391013743, "stop": 1658391013743, "uuid": "bdd578db-673a-4670-b53b-88cbbdc80340", "historyId": "bad3a1e9cecfd2baeb1bbe7bd19a0ccc", "testCaseId": "cb5b9a8c10dd2d390bfc2facfd95b8f7", "fullName": "project.DRP.test_case.SystemMgmt_RegionMgmt.TestUpdateArea#test_004_004", "labels": [{"name": "severity", "value": "normal"}, {"name": "feature", "value": "系统管理-区域管理"}, {"name": "story", "value": "编辑区域"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "project.DRP.test_case"}, {"name": "suite", "value": "SystemMgmt_RegionMgmt"}, {"name": "subSuite", "value": "TestUpdateArea"}, {"name": "host", "value": "SZXIONGWM"}, {"name": "thread", "value": "20964-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project.DRP.test_case.SystemMgmt_RegionMgmt"}]}