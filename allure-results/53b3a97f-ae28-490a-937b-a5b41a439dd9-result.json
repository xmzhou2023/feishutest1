{"name": "Key Word精确查询、模糊查询成功", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=99.0.4844.84)\nStacktrace:\n#0 0x55c7ecb5c7d3 <unknown>\n#1 0x55c7ec8b851f <unknown>\n#2 0x55c7ec8efd65 <unknown>\n#3 0x55c7ec8e3a19 <unknown>\n#4 0x55c7ec90c6b2 <unknown>\n#5 0x55c7ec8e32c3 <unknown>\n#6 0x55c7ec90c7be <unknown>\n#7 0x55c7ec91fa0c <unknown>\n#8 0x55c7ec90c5a3 <unknown>\n#9 0x55c7ec8e1ddc <unknown>\n#10 0x55c7ec8e2de5 <unknown>\n#11 0x55c7ecb8d49d <unknown>\n#12 0x55c7ecba660c <unknown>\n#13 0x55c7ecb8f205 <unknown>\n#14 0x55c7ecba6ee5 <unknown>\n#15 0x55c7ecb83070 <unknown>\n#16 0x55c7ecbc2488 <unknown>\n#17 0x55c7ecbc260c <unknown>\n#18 0x55c7ecbdbc6d <unknown>\n#19 0x7fc076d29609 <unknown>", "trace": "drivers = <selenium.webdriver.remote.webdriver.WebDriver (session=\"a48e1f48953bb8dff08989e5321ff4b3\")>\n\n    @pytest.fixture(scope='module',autouse=True)\n    def module_setup_fixture(drivers):\n        logging.info(\"前往RC中的Basic Data Mgt的Symptom Group Mgt\")\n        user = SymPage(drivers)\n>       user.GoTo_Symp()  # 进入现象组页面\n\nproject\\CRM\\test_case\\RC_BasicDataMgt_SymptomGroupMgt.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nproject\\CRM\\page_object\\RC_BasicDataMgt_SymptomGroupMgt.py:22: in GoTo_Symp\n    self.is_click(user['Symptom Group Mgt'])\npublic\\base\\basics.py:205: in is_click\n    self.find_element(locator).click()\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001FC3AFE1CC0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55c7ecbc260c \\\\u003Cunknown>\\\\n#18 0x55c7ecbdbc6d \\\\u003Cunknown>\\\\n#19 0x7fc076d29609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=99.0.4844.84)\nE       Stacktrace:\nE       #0 0x55c7ecb5c7d3 <unknown>\nE       #1 0x55c7ec8b851f <unknown>\nE       #2 0x55c7ec8efd65 <unknown>\nE       #3 0x55c7ec8e3a19 <unknown>\nE       #4 0x55c7ec90c6b2 <unknown>\nE       #5 0x55c7ec8e32c3 <unknown>\nE       #6 0x55c7ec90c7be <unknown>\nE       #7 0x55c7ec91fa0c <unknown>\nE       #8 0x55c7ec90c5a3 <unknown>\nE       #9 0x55c7ec8e1ddc <unknown>\nE       #10 0x55c7ec8e2de5 <unknown>\nE       #11 0x55c7ecb8d49d <unknown>\nE       #12 0x55c7ecba660c <unknown>\nE       #13 0x55c7ecb8f205 <unknown>\nE       #14 0x55c7ecba6ee5 <unknown>\nE       #15 0x55c7ecb83070 <unknown>\nE       #16 0x55c7ecbc2488 <unknown>\nE       #17 0x55c7ecbc260c <unknown>\nE       #18 0x55c7ecbdbc6d <unknown>\nE       #19 0x7fc076d29609 <unknown>\n\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementNotInteractableException"}, "description": "Key Word精确查询、模糊查询成功", "start": 1661437171011, "stop": 1661437171011, "uuid": "c0088eb6-b8d8-4fd0-8d97-23619f2def4e", "historyId": "d3a45f7274df409f83c74db013cd381b", "testCaseId": "f996e3215f00e3c32d0e0f4e4df36a37", "fullName": "project.CRM.test_case.RC_BasicDataMgt_SymptomGroupMgt.TestGetSymptomGroup#test_1269695", "labels": [{"name": "feature", "value": "SymptomGroup"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "查询现象组"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "project.CRM.test_case"}, {"name": "suite", "value": "RC_BasicDataMgt_SymptomGroupMgt"}, {"name": "subSuite", "value": "TestGetSymptomGroup"}, {"name": "host", "value": "SZXIONGWM"}, {"name": "thread", "value": "8984-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project.CRM.test_case.RC_BasicDataMgt_SymptomGroupMgt"}]}