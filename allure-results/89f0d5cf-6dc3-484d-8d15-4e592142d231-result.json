{"name": "产品信息，组合条件查询，无匹配数据", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-475e5b62=\"\">...</span> is not clickable at point (274, 100). Other element would receive the click: <div data-v-31962c5e=\"\" class=\"el-dialog__wrapper\" style=\"z-index: 2123;\">...</div>\n  (Session info: chrome=99.0.4844.84)\nStacktrace:\n#0 0x55a18e6507d3 <unknown>\n#1 0x55a18e3ac688 <unknown>\n#2 0x55a18e3ea298 <unknown>\n#3 0x55a18e3e7d47 <unknown>\n#4 0x55a18e3e54b4 <unknown>\n#5 0x55a18e3e423c <unknown>\n#6 0x55a18e3d7a19 <unknown>\n#7 0x55a18e4006b2 <unknown>\n#8 0x55a18e3d72c3 <unknown>\n#9 0x55a18e4007be <unknown>\n#10 0x55a18e413a0c <unknown>\n#11 0x55a18e4005a3 <unknown>\n#12 0x55a18e3d5ddc <unknown>\n#13 0x55a18e3d6de5 <unknown>\n#14 0x55a18e68149d <unknown>\n#15 0x55a18e69a60c <unknown>\n#16 0x55a18e683205 <unknown>\n#17 0x55a18e69aee5 <unknown>\n#18 0x55a18e677070 <unknown>\n#19 0x55a18e6b6488 <unknown>\n#20 0x55a18e6b660c <unknown>\n#21 0x55a18e6cfc6d <unknown>\n#22 0x7fb527fc2609 <unknown>", "trace": "self = <DRPDataMgmt_ModelDatabase.TestScreenFunction object at 0x00000282DE98CB80>, drivers = <selenium.webdriver.remote.webdriver.WebDriver (session=\"60c49c89889cff42ced63ebe265f9a69\")>\n\n    @allure.story(\"筛选功能\")\n    @allure.title(\"产品信息，组合条件查询，无匹配数据\")\n    @allure.description(\"打开筛选弹窗，输入筛选条件，点击查询，页面显示’暂无数据‘字样\")\n    @allure.severity(\"trivial\")  # blocker\\critical\\normal\\minor\\trivial\n    @pytest.mark.smoke\n    def test_005_002(self, drivers):\n        user = ModelDatabase(drivers)\n>       user.goto_tab('产品信息')  # 切换到产品信息tab页\n\nproject\\DRP\\test_case\\DRPDataMgmt_ModelDatabase.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nproject\\DRP\\page_object\\DRPDataMgmt_ModelDatabase.py:19: in goto_tab\n    self.is_click(user['Tab菜单'], tab)\npublic\\base\\basics.py:187: in is_click\n    self.find_element(Npath).click()\nc:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nc:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nc:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000282DE48C130>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55a18e6b660c \\\\u003Cunknown>\\\\n#21 0x55a18e6cfc6d \\\\u003Cunknown>\\\\n#22 0x7fb527fc2609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-475e5b62=\"\">...</span> is not clickable at point (274, 100). Other element would receive the click: <div data-v-31962c5e=\"\" class=\"el-dialog__wrapper\" style=\"z-index: 2123;\">...</div>\nE         (Session info: chrome=99.0.4844.84)\nE       Stacktrace:\nE       #0 0x55a18e6507d3 <unknown>\nE       #1 0x55a18e3ac688 <unknown>\nE       #2 0x55a18e3ea298 <unknown>\nE       #3 0x55a18e3e7d47 <unknown>\nE       #4 0x55a18e3e54b4 <unknown>\nE       #5 0x55a18e3e423c <unknown>\nE       #6 0x55a18e3d7a19 <unknown>\nE       #7 0x55a18e4006b2 <unknown>\nE       #8 0x55a18e3d72c3 <unknown>\nE       #9 0x55a18e4007be <unknown>\nE       #10 0x55a18e413a0c <unknown>\nE       #11 0x55a18e4005a3 <unknown>\nE       #12 0x55a18e3d5ddc <unknown>\nE       #13 0x55a18e3d6de5 <unknown>\nE       #14 0x55a18e68149d <unknown>\nE       #15 0x55a18e69a60c <unknown>\nE       #16 0x55a18e683205 <unknown>\nE       #17 0x55a18e69aee5 <unknown>\nE       #18 0x55a18e677070 <unknown>\nE       #19 0x55a18e6b6488 <unknown>\nE       #20 0x55a18e6b660c <unknown>\nE       #21 0x55a18e6cfc6d <unknown>\nE       #22 0x7fb527fc2609 <unknown>\n\nc:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "description": "打开筛选弹窗，输入筛选条件，点击查询，页面显示’暂无数据‘字样", "steps": [{"name": "前往Tab菜单", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-475e5b62=\"\">...</span> is not clickable at point (274, 100). Other element would receive the click: <div data-v-31962c5e=\"\" class=\"el-dialog__wrapper\" style=\"z-index: 2123;\">...</div>\n  (Session info: chrome=99.0.4844.84)\nStacktrace:\n#0 0x55a18e6507d3 <unknown>\n#1 0x55a18e3ac688 <unknown>\n#2 0x55a18e3ea298 <unknown>\n#3 0x55a18e3e7d47 <unknown>\n#4 0x55a18e3e54b4 <unknown>\n#5 0x55a18e3e423c <unknown>\n#6 0x55a18e3d7a19 <unknown>\n#7 0x55a18e4006b2 <unknown>\n#8 0x55a18e3d72c3 <unknown>\n#9 0x55a18e4007be <unknown>\n#10 0x55a18e413a0c <unknown>\n#11 0x55a18e4005a3 <unknown>\n#12 0x55a18e3d5ddc <unknown>\n#13 0x55a18e3d6de5 <unknown>\n#14 0x55a18e68149d <unknown>\n#15 0x55a18e69a60c <unknown>\n#16 0x55a18e683205 <unknown>\n#17 0x55a18e69aee5 <unknown>\n#18 0x55a18e677070 <unknown>\n#19 0x55a18e6b6488 <unknown>\n#20 0x55a18e6b660c <unknown>\n#21 0x55a18e6cfc6d <unknown>\n#22 0x7fb527fc2609 <unknown>\n\n", "trace": "  File \"c:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"E:\\工作文件\\DRP_autotest\\new\\UIPOMTest\\project\\DRP\\page_object\\DRPDataMgmt_ModelDatabase.py\", line 19, in goto_tab\n    self.is_click(user['Tab菜单'], tab)\n  File \"E:\\工作文件\\DRP_autotest\\new\\UIPOMTest\\public\\base\\basics.py\", line 187, in is_click\n    self.find_element(Npath).click()\n  File \"c:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 81, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"c:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 710, in _execute\n    return self._parent.execute(command, params)\n  File \"c:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"c:\\users\\jiang.long\\appdata\\local\\programs\\python\\python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "tab", "value": "'产品信息'"}], "start": 1660289292060, "stop": 1660289295234}, {"name": "添加失败截图", "status": "passed", "attachments": [{"name": "失败截图", "source": "e0994d18-f863-4976-b282-b2ca33e45d18-attachment.png", "type": "image/png"}], "start": 1660289295277, "stop": 1660289295686}], "attachments": [{"name": "log", "source": "ad920268-ce3d-43ee-97b4-466720099008-attachment.txt", "type": "text/plain"}], "start": 1660289292060, "stop": 1660289295234, "uuid": "062c2f5a-f4ec-4525-ba6e-630931820201", "historyId": "5eca280446fbf5d3425773c36b8aac59", "testCaseId": "af7110ac34636825eeb9aeb3c30fc2fa", "fullName": "project.DRP.test_case.DRPDataMgmt_ModelDatabase.TestScreenFunction#test_005_002", "labels": [{"name": "severity", "value": "trivial"}, {"name": "feature", "value": "DRP数据管理-机型库"}, {"name": "story", "value": "筛选功能"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "project.DRP.test_case"}, {"name": "suite", "value": "DRPDataMgmt_ModelDatabase"}, {"name": "subSuite", "value": "TestScreenFunction"}, {"name": "host", "value": "CQPILONGJIANG"}, {"name": "thread", "value": "31808-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project.DRP.test_case.DRPDataMgmt_ModelDatabase"}]}