{"name": "新增三级区域（大区）", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-2b063d79=\"\">...</span> is not clickable at point (291, 196). Other element would receive the click: <div class=\"el-loading-mask el-loading-fade-leave el-loading-fade-leave-active\" style=\"\">...</div>\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00DB56B3+2184883]\n\tOrdinal0 [0x00D4E5F1+1762801]\n\tOrdinal0 [0x00C63DA8+802216]\n\tOrdinal0 [0x00C98287+1016455]\n\tOrdinal0 [0x00C96258+1008216]\n\tOrdinal0 [0x00C93F3B+999227]\n\tOrdinal0 [0x00C92C99+994457]\n\tOrdinal0 [0x00C888D3+952531]\n\tOrdinal0 [0x00CACB0C+1100556]\n\tOrdinal0 [0x00C882B4+950964]\n\tOrdinal0 [0x00CACD24+1101092]\n\tOrdinal0 [0x00CBCF52+1167186]\n\tOrdinal0 [0x00CAC926+1100070]\n\tOrdinal0 [0x00C86EA0+945824]\n\tOrdinal0 [0x00C87D96+949654]\n\tGetHandleVerifier [0x01054192+2704034]\n\tGetHandleVerifier [0x0104687D+2648461]\n\tGetHandleVerifier [0x00E4119A+529066]\n\tGetHandleVerifier [0x00E40006+524566]\n\tOrdinal0 [0x00D54F2B+1789739]\n\tOrdinal0 [0x00D59978+1808760]\n\tOrdinal0 [0x00D59A65+1808997]\n\tOrdinal0 [0x00D62A01+1845761]\n\tBaseThreadInitThunk [0x752C6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77538944+228]\n\tRtlGetAppContainerNamedObjectPath [0x77538914+180]", "trace": "self = <SystemMgmt_RegionMgmt.TestAppendArea object at 0x00000109A3804D90>, drivers = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"f73bdc798f6c1d36e790d7f722f65436\")>\n\n    @allure.story(\"新增区域\")\n    @allure.title(\"新增三级区域（大区）\")\n    @allure.description(\"前往‘Xpark业务区’二级区域，新增‘lj测试001’大区成功\")\n    @allure.severity(\"blocker\")  # blocker\\critical\\normal\\minor\\trivial\n    @pytest.mark.smoke\n    def test_003_002(self, drivers):\n        user = NavPage(drivers)\n        user.click_gotonav(\"系统管理\", \"区域管理\")\n        user = DomAssert(drivers)\n        user.assert_url(\"/systemManage/areaManage\")\n        user = AreaPage(drivers)\n>       user.goto_tree('Infinix事业部', 'Xpark业务区')\n\nproject\\DRP\\test_case\\SystemMgmt_RegionMgmt.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nproject\\DRP\\page_object\\SystemMgmt_RegionMgmt.py:20: in goto_tree\n    self.is_click(user['tab区域菜单一级菜单'], choice=content[0])\npublic\\base\\basics.py:153: in is_click\n    self.find_element(Npath).click()\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:710: in _execute\n    return self._parent.execute(command, params)\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000109A36D9960>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77538944+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77538914+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-2b063d79=\"\">...</span> is not clickable at point (291, 196). Other element would receive the click: <div class=\"el-loading-mask el-loading-fade-leave el-loading-fade-leave-active\" style=\"\">...</div>\nE         (Session info: chrome=103.0.5060.134)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00DB56B3+2184883]\nE       \tOrdinal0 [0x00D4E5F1+1762801]\nE       \tOrdinal0 [0x00C63DA8+802216]\nE       \tOrdinal0 [0x00C98287+1016455]\nE       \tOrdinal0 [0x00C96258+1008216]\nE       \tOrdinal0 [0x00C93F3B+999227]\nE       \tOrdinal0 [0x00C92C99+994457]\nE       \tOrdinal0 [0x00C888D3+952531]\nE       \tOrdinal0 [0x00CACB0C+1100556]\nE       \tOrdinal0 [0x00C882B4+950964]\nE       \tOrdinal0 [0x00CACD24+1101092]\nE       \tOrdinal0 [0x00CBCF52+1167186]\nE       \tOrdinal0 [0x00CAC926+1100070]\nE       \tOrdinal0 [0x00C86EA0+945824]\nE       \tOrdinal0 [0x00C87D96+949654]\nE       \tGetHandleVerifier [0x01054192+2704034]\nE       \tGetHandleVerifier [0x0104687D+2648461]\nE       \tGetHandleVerifier [0x00E4119A+529066]\nE       \tGetHandleVerifier [0x00E40006+524566]\nE       \tOrdinal0 [0x00D54F2B+1789739]\nE       \tOrdinal0 [0x00D59978+1808760]\nE       \tOrdinal0 [0x00D59A65+1808997]\nE       \tOrdinal0 [0x00D62A01+1845761]\nE       \tBaseThreadInitThunk [0x752C6359+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77538944+228]\nE       \tRtlGetAppContainerNamedObjectPath [0x77538914+180]\n\nD:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "description": "前往‘Xpark业务区’二级区域，新增‘lj测试001’大区成功", "steps": [{"name": "前往菜单", "status": "passed", "parameters": [{"name": "content", "value": "('系统管理', '区域管理')"}], "start": 1658391557081, "stop": 1658391560894}, {"name": "值为True值断言", "status": "passed", "parameters": [{"name": "word", "value": "'/systemManage/areaManage'"}], "start": 1658391560894, "stop": 1658391560912}, {"name": "前往树", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span data-v-2b063d79=\"\">...</span> is not clickable at point (291, 196). Other element would receive the click: <div class=\"el-loading-mask el-loading-fade-leave el-loading-fade-leave-active\" style=\"\">...</div>\n  (Session info: chrome=103.0.5060.134)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00DB56B3+2184883]\n\tOrdinal0 [0x00D4E5F1+1762801]\n\tOrdinal0 [0x00C63DA8+802216]\n\tOrdinal0 [0x00C98287+1016455]\n\tOrdinal0 [0x00C96258+1008216]\n\tOrdinal0 [0x00C93F3B+999227]\n\tOrdinal0 [0x00C92C99+994457]\n\tOrdinal0 [0x00C888D3+952531]\n\tOrdinal0 [0x00CACB0C+1100556]\n\tOrdinal0 [0x00C882B4+950964]\n\tOrdinal0 [0x00CACD24+1101092]\n\tOrdinal0 [0x00CBCF52+1167186]\n\tOrdinal0 [0x00CAC926+1100070]\n\tOrdinal0 [0x00C86EA0+945824]\n\tOrdinal0 [0x00C87D96+949654]\n\tGetHandleVerifier [0x01054192+2704034]\n\tGetHandleVerifier [0x0104687D+2648461]\n\tGetHandleVerifier [0x00E4119A+529066]\n\tGetHandleVerifier [0x00E40006+524566]\n\tOrdinal0 [0x00D54F2B+1789739]\n\tOrdinal0 [0x00D59978+1808760]\n\tOrdinal0 [0x00D59A65+1808997]\n\tOrdinal0 [0x00D62A01+1845761]\n\tBaseThreadInitThunk [0x752C6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77538944+228]\n\tRtlGetAppContainerNamedObjectPath [0x77538914+180]\n\n", "trace": "  File \"D:\\app\\Python10\\lib\\site-packages\\allure_commons\\_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"D:\\售后自动化\\UIPOMTest\\project\\DRP\\page_object\\SystemMgmt_RegionMgmt.py\", line 20, in goto_tree\n    self.is_click(user['tab区域菜单一级菜单'], choice=content[0])\n  File \"D:\\售后自动化\\UIPOMTest\\public\\base\\basics.py\", line 153, in is_click\n    self.find_element(Npath).click()\n  File \"D:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 81, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 710, in _execute\n    return self._parent.execute(command, params)\n  File \"D:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\app\\Python10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 247, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "content", "value": "('Infinix事业部', 'Xpark业务区')"}], "start": 1658391560912, "stop": 1658391568125}, {"name": "添加失败截图", "status": "passed", "attachments": [{"name": "失败截图", "source": "1eba073c-f8fe-4b5e-84e7-c7ac7f9c9b5c-attachment.png", "type": "image/png"}], "start": 1658391568204, "stop": 1658391568606}], "attachments": [{"name": "log", "source": "ec5f3795-bba3-440f-9b5d-48195122acbe-attachment.txt", "type": "text/plain"}], "start": 1658391557081, "stop": 1658391568127, "uuid": "ed2409f5-2542-4dcf-ba9d-8824c968cad4", "historyId": "eff9331e298e417b4e1d4b189f45ccdc", "testCaseId": "afb444494c17ca33aa094b10559f6cf2", "fullName": "project.DRP.test_case.SystemMgmt_RegionMgmt.TestAppendArea#test_003_002", "labels": [{"name": "feature", "value": "系统管理-区域管理"}, {"name": "story", "value": "新增区域"}, {"name": "severity", "value": "blocker"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "project.DRP.test_case"}, {"name": "suite", "value": "SystemMgmt_RegionMgmt"}, {"name": "subSuite", "value": "TestAppendArea"}, {"name": "host", "value": "SZXIONGWM"}, {"name": "thread", "value": "400-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "project.DRP.test_case.SystemMgmt_RegionMgmt"}]}